@page "/weather"

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @* <table class="table"> *@
    @*     <thead> *@
    @*     <tr> *@
    @*         <th>Date</th> *@
    @*         <th>Temp. (C)</th> *@
    @*         <th>Temp. (F)</th> *@
    @*         <th>Summary</th> *@
    @*     </tr> *@
    @*     </thead> *@
    @*     <tbody> *@
    @*     @foreach (var forecast in forecasts) *@
    @*     { *@
    @*         <tr> *@
    @*             <td>@forecast.Date.ToShortDateString()</td> *@
    @*             <td>@forecast.TemperatureC</td> *@
    @*             <td>@forecast.TemperatureF</td> *@
    @*             <td>@forecast.Summary</td> *@
    @*         </tr> *@
    @*     } *@
    @*     </tbody> *@
    @* </table> *@
    <MudDataGrid T="WeatherForecast" Items="forecasts" QuickFilter="_quickFilter">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Weather</MudText>
            <MudSpacer />
            <MudTextField T="string" @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true" 
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.Date"/>
            <PropertyColumn Property="x => x.TemperatureC" Title="Temp. (C)"/>
            <PropertyColumn Property="x => x.TemperatureF" Title="Temp. (F)"/>
            <PropertyColumn Property="x => x.Summary" Title="Summary"/>
        </Columns>
        <PagerContent>
            <MudDataGridPager />
        </PagerContent>
    </MudDataGrid>
}

@code {
    private WeatherForecast[]? forecasts;
    private string _searchString;

    private Func<WeatherForecast, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Summary != null && x.Summary.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };
    
    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate a loading indicator
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
